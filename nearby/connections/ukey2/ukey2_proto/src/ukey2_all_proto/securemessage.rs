// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `securemessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SecureMessage {
    // message fields
    header_and_body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SecureMessage {
    fn default() -> &'a SecureMessage {
        <SecureMessage as ::protobuf::Message>::default_instance()
    }
}

impl SecureMessage {
    pub fn new() -> SecureMessage {
        ::std::default::Default::default()
    }

    // required bytes header_and_body = 1;


    pub fn get_header_and_body(&self) -> &[u8] {
        match self.header_and_body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_header_and_body(&mut self) {
        self.header_and_body.clear();
    }

    pub fn has_header_and_body(&self) -> bool {
        self.header_and_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_and_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.header_and_body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_and_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.header_and_body.is_none() {
            self.header_and_body.set_default();
        }
        self.header_and_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_and_body(&mut self) -> ::std::vec::Vec<u8> {
        self.header_and_body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SecureMessage {
    fn is_initialized(&self) -> bool {
        if self.header_and_body.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.header_and_body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header_and_body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header_and_body.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SecureMessage {
        SecureMessage::new()
    }

    fn default_instance() -> &'static SecureMessage {
        static instance: ::protobuf::rt::LazyV2<SecureMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SecureMessage::new)
    }
}

impl ::protobuf::Clear for SecureMessage {
    fn clear(&mut self) {
        self.header_and_body.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SecureMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Header {
    // message fields
    signature_scheme: ::std::option::Option<SigScheme>,
    encryption_scheme: ::std::option::Option<EncScheme>,
    verification_key_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    decryption_key_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    iv: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    public_metadata: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    associated_data_length: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // required .securemessage.SigScheme signature_scheme = 1;


    pub fn get_signature_scheme(&self) -> SigScheme {
        self.signature_scheme.unwrap_or(SigScheme::HMAC_SHA256)
    }
    pub fn clear_signature_scheme(&mut self) {
        self.signature_scheme = ::std::option::Option::None;
    }

    pub fn has_signature_scheme(&self) -> bool {
        self.signature_scheme.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_scheme(&mut self, v: SigScheme) {
        self.signature_scheme = ::std::option::Option::Some(v);
    }

    // required .securemessage.EncScheme encryption_scheme = 2;


    pub fn get_encryption_scheme(&self) -> EncScheme {
        self.encryption_scheme.unwrap_or(EncScheme::NONE)
    }
    pub fn clear_encryption_scheme(&mut self) {
        self.encryption_scheme = ::std::option::Option::None;
    }

    pub fn has_encryption_scheme(&self) -> bool {
        self.encryption_scheme.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_scheme(&mut self, v: EncScheme) {
        self.encryption_scheme = ::std::option::Option::Some(v);
    }

    // optional bytes verification_key_id = 3;


    pub fn get_verification_key_id(&self) -> &[u8] {
        match self.verification_key_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_verification_key_id(&mut self) {
        self.verification_key_id.clear();
    }

    pub fn has_verification_key_id(&self) -> bool {
        self.verification_key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_verification_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.verification_key_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_verification_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.verification_key_id.is_none() {
            self.verification_key_id.set_default();
        }
        self.verification_key_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_verification_key_id(&mut self) -> ::std::vec::Vec<u8> {
        self.verification_key_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes decryption_key_id = 4;


    pub fn get_decryption_key_id(&self) -> &[u8] {
        match self.decryption_key_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_decryption_key_id(&mut self) {
        self.decryption_key_id.clear();
    }

    pub fn has_decryption_key_id(&self) -> bool {
        self.decryption_key_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_decryption_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.decryption_key_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_decryption_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.decryption_key_id.is_none() {
            self.decryption_key_id.set_default();
        }
        self.decryption_key_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_decryption_key_id(&mut self) -> ::std::vec::Vec<u8> {
        self.decryption_key_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes iv = 5;


    pub fn get_iv(&self) -> &[u8] {
        match self.iv.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    pub fn has_iv(&self) -> bool {
        self.iv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.iv.is_none() {
            self.iv.set_default();
        }
        self.iv.as_mut().unwrap()
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        self.iv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes public_metadata = 6;


    pub fn get_public_metadata(&self) -> &[u8] {
        match self.public_metadata.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_metadata(&mut self) {
        self.public_metadata.clear();
    }

    pub fn has_public_metadata(&self) -> bool {
        self.public_metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_metadata(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_metadata = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_metadata(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_metadata.is_none() {
            self.public_metadata.set_default();
        }
        self.public_metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_metadata(&mut self) -> ::std::vec::Vec<u8> {
        self.public_metadata.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 associated_data_length = 7;


    pub fn get_associated_data_length(&self) -> u32 {
        self.associated_data_length.unwrap_or(0u32)
    }
    pub fn clear_associated_data_length(&mut self) {
        self.associated_data_length = ::std::option::Option::None;
    }

    pub fn has_associated_data_length(&self) -> bool {
        self.associated_data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_associated_data_length(&mut self, v: u32) {
        self.associated_data_length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        if self.signature_scheme.is_none() {
            return false;
        }
        if self.encryption_scheme.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.signature_scheme, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.encryption_scheme, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.verification_key_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.decryption_key_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.iv)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_metadata)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.associated_data_length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.signature_scheme {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.encryption_scheme {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.verification_key_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.decryption_key_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.iv.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.public_metadata.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.associated_data_length {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.signature_scheme {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.encryption_scheme {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.verification_key_id.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.decryption_key_id.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.iv.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.public_metadata.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(v) = self.associated_data_length {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.signature_scheme = ::std::option::Option::None;
        self.encryption_scheme = ::std::option::Option::None;
        self.verification_key_id.clear();
        self.decryption_key_id.clear();
        self.iv.clear();
        self.public_metadata.clear();
        self.associated_data_length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeaderAndBody {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeaderAndBody {
    fn default() -> &'a HeaderAndBody {
        <HeaderAndBody as ::protobuf::Message>::default_instance()
    }
}

impl HeaderAndBody {
    pub fn new() -> HeaderAndBody {
        ::std::default::Default::default()
    }

    // required .securemessage.Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // required bytes body = 2;


    pub fn get_body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HeaderAndBody {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        if self.body.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeaderAndBody {
        HeaderAndBody::new()
    }

    fn default_instance() -> &'static HeaderAndBody {
        static instance: ::protobuf::rt::LazyV2<HeaderAndBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeaderAndBody::new)
    }
}

impl ::protobuf::Clear for HeaderAndBody {
    fn clear(&mut self) {
        self.header.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for HeaderAndBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct HeaderAndBodyInternal {
    // message fields
    header: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeaderAndBodyInternal {
    fn default() -> &'a HeaderAndBodyInternal {
        <HeaderAndBodyInternal as ::protobuf::Message>::default_instance()
    }
}

impl HeaderAndBodyInternal {
    pub fn new() -> HeaderAndBodyInternal {
        ::std::default::Default::default()
    }

    // required bytes header = 1;


    pub fn get_header(&self) -> &[u8] {
        match self.header.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::vec::Vec<u8>) {
        self.header = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::vec::Vec<u8> {
        self.header.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes body = 2;


    pub fn get_body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HeaderAndBodyInternal {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        if self.body.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeaderAndBodyInternal {
        HeaderAndBodyInternal::new()
    }

    fn default_instance() -> &'static HeaderAndBodyInternal {
        static instance: ::protobuf::rt::LazyV2<HeaderAndBodyInternal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeaderAndBodyInternal::new)
    }
}

impl ::protobuf::Clear for HeaderAndBodyInternal {
    fn clear(&mut self) {
        self.header.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for HeaderAndBodyInternal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EcP256PublicKey {
    // message fields
    x: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    y: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EcP256PublicKey {
    fn default() -> &'a EcP256PublicKey {
        <EcP256PublicKey as ::protobuf::Message>::default_instance()
    }
}

impl EcP256PublicKey {
    pub fn new() -> EcP256PublicKey {
        ::std::default::Default::default()
    }

    // required bytes x = 1;


    pub fn get_x(&self) -> &[u8] {
        match self.x.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_x(&mut self) {
        self.x.clear();
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: ::std::vec::Vec<u8>) {
        self.x = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_x(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.x.is_none() {
            self.x.set_default();
        }
        self.x.as_mut().unwrap()
    }

    // Take field
    pub fn take_x(&mut self) -> ::std::vec::Vec<u8> {
        self.x.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes y = 2;


    pub fn get_y(&self) -> &[u8] {
        match self.y.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_y(&mut self) {
        self.y.clear();
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: ::std::vec::Vec<u8>) {
        self.y = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_y(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.y.is_none() {
            self.y.set_default();
        }
        self.y.as_mut().unwrap()
    }

    // Take field
    pub fn take_y(&mut self) -> ::std::vec::Vec<u8> {
        self.y.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EcP256PublicKey {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.x)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.y)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.x.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.y.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.x.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.y.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EcP256PublicKey {
        EcP256PublicKey::new()
    }

    fn default_instance() -> &'static EcP256PublicKey {
        static instance: ::protobuf::rt::LazyV2<EcP256PublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EcP256PublicKey::new)
    }
}

impl ::protobuf::Clear for EcP256PublicKey {
    fn clear(&mut self) {
        self.x.clear();
        self.y.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EcP256PublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SimpleRsaPublicKey {
    // message fields
    n: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    e: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleRsaPublicKey {
    fn default() -> &'a SimpleRsaPublicKey {
        <SimpleRsaPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl SimpleRsaPublicKey {
    pub fn new() -> SimpleRsaPublicKey {
        ::std::default::Default::default()
    }

    // required bytes n = 1;


    pub fn get_n(&self) -> &[u8] {
        match self.n.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_n(&mut self) {
        self.n.clear();
    }

    pub fn has_n(&self) -> bool {
        self.n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: ::std::vec::Vec<u8>) {
        self.n = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_n(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.n.is_none() {
            self.n.set_default();
        }
        self.n.as_mut().unwrap()
    }

    // Take field
    pub fn take_n(&mut self) -> ::std::vec::Vec<u8> {
        self.n.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 e = 2;


    pub fn get_e(&self) -> i32 {
        self.e.unwrap_or(65537i32)
    }
    pub fn clear_e(&mut self) {
        self.e = ::std::option::Option::None;
    }

    pub fn has_e(&self) -> bool {
        self.e.is_some()
    }

    // Param is passed by value, moved
    pub fn set_e(&mut self, v: i32) {
        self.e = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SimpleRsaPublicKey {
    fn is_initialized(&self) -> bool {
        if self.n.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.e = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.n.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.e {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.n.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.e {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleRsaPublicKey {
        SimpleRsaPublicKey::new()
    }

    fn default_instance() -> &'static SimpleRsaPublicKey {
        static instance: ::protobuf::rt::LazyV2<SimpleRsaPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleRsaPublicKey::new)
    }
}

impl ::protobuf::Clear for SimpleRsaPublicKey {
    fn clear(&mut self) {
        self.n.clear();
        self.e = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleRsaPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct DhPublicKey {
    // message fields
    y: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DhPublicKey {
    fn default() -> &'a DhPublicKey {
        <DhPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl DhPublicKey {
    pub fn new() -> DhPublicKey {
        ::std::default::Default::default()
    }

    // required bytes y = 1;


    pub fn get_y(&self) -> &[u8] {
        match self.y.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_y(&mut self) {
        self.y.clear();
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: ::std::vec::Vec<u8>) {
        self.y = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_y(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.y.is_none() {
            self.y.set_default();
        }
        self.y.as_mut().unwrap()
    }

    // Take field
    pub fn take_y(&mut self) -> ::std::vec::Vec<u8> {
        self.y.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DhPublicKey {
    fn is_initialized(&self) -> bool {
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.y)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.y.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.y.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DhPublicKey {
        DhPublicKey::new()
    }

    fn default_instance() -> &'static DhPublicKey {
        static instance: ::protobuf::rt::LazyV2<DhPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DhPublicKey::new)
    }
}

impl ::protobuf::Clear for DhPublicKey {
    fn clear(&mut self) {
        self.y.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DhPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenericPublicKey {
    // message fields
    field_type: ::std::option::Option<PublicKeyType>,
    pub ec_p256_public_key: ::protobuf::SingularPtrField<EcP256PublicKey>,
    pub rsa2048_public_key: ::protobuf::SingularPtrField<SimpleRsaPublicKey>,
    pub dh2048_public_key: ::protobuf::SingularPtrField<DhPublicKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericPublicKey {
    fn default() -> &'a GenericPublicKey {
        <GenericPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl GenericPublicKey {
    pub fn new() -> GenericPublicKey {
        ::std::default::Default::default()
    }

    // required .securemessage.PublicKeyType type = 1;


    pub fn get_field_type(&self) -> PublicKeyType {
        self.field_type.unwrap_or(PublicKeyType::EC_P256)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PublicKeyType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;


    pub fn get_ec_p256_public_key(&self) -> &EcP256PublicKey {
        self.ec_p256_public_key.as_ref().unwrap_or_else(|| <EcP256PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ec_p256_public_key(&mut self) {
        self.ec_p256_public_key.clear();
    }

    pub fn has_ec_p256_public_key(&self) -> bool {
        self.ec_p256_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ec_p256_public_key(&mut self, v: EcP256PublicKey) {
        self.ec_p256_public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ec_p256_public_key(&mut self) -> &mut EcP256PublicKey {
        if self.ec_p256_public_key.is_none() {
            self.ec_p256_public_key.set_default();
        }
        self.ec_p256_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_ec_p256_public_key(&mut self) -> EcP256PublicKey {
        self.ec_p256_public_key.take().unwrap_or_else(|| EcP256PublicKey::new())
    }

    // optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;


    pub fn get_rsa2048_public_key(&self) -> &SimpleRsaPublicKey {
        self.rsa2048_public_key.as_ref().unwrap_or_else(|| <SimpleRsaPublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rsa2048_public_key(&mut self) {
        self.rsa2048_public_key.clear();
    }

    pub fn has_rsa2048_public_key(&self) -> bool {
        self.rsa2048_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rsa2048_public_key(&mut self, v: SimpleRsaPublicKey) {
        self.rsa2048_public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rsa2048_public_key(&mut self) -> &mut SimpleRsaPublicKey {
        if self.rsa2048_public_key.is_none() {
            self.rsa2048_public_key.set_default();
        }
        self.rsa2048_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_rsa2048_public_key(&mut self) -> SimpleRsaPublicKey {
        self.rsa2048_public_key.take().unwrap_or_else(|| SimpleRsaPublicKey::new())
    }

    // optional .securemessage.DhPublicKey dh2048_public_key = 4;


    pub fn get_dh2048_public_key(&self) -> &DhPublicKey {
        self.dh2048_public_key.as_ref().unwrap_or_else(|| <DhPublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dh2048_public_key(&mut self) {
        self.dh2048_public_key.clear();
    }

    pub fn has_dh2048_public_key(&self) -> bool {
        self.dh2048_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dh2048_public_key(&mut self, v: DhPublicKey) {
        self.dh2048_public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dh2048_public_key(&mut self) -> &mut DhPublicKey {
        if self.dh2048_public_key.is_none() {
            self.dh2048_public_key.set_default();
        }
        self.dh2048_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_dh2048_public_key(&mut self) -> DhPublicKey {
        self.dh2048_public_key.take().unwrap_or_else(|| DhPublicKey::new())
    }
}

impl ::protobuf::Message for GenericPublicKey {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.ec_p256_public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rsa2048_public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dh2048_public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ec_p256_public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rsa2048_public_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dh2048_public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.ec_p256_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rsa2048_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dh2048_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.ec_p256_public_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rsa2048_public_key.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dh2048_public_key.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericPublicKey {
        GenericPublicKey::new()
    }

    fn default_instance() -> &'static GenericPublicKey {
        static instance: ::protobuf::rt::LazyV2<GenericPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericPublicKey::new)
    }
}

impl ::protobuf::Clear for GenericPublicKey {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.ec_p256_public_key.clear();
        self.rsa2048_public_key.clear();
        self.dh2048_public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SigScheme {
    HMAC_SHA256 = 1,
    ECDSA_P256_SHA256 = 2,
    RSA2048_SHA256 = 3,
}

impl ::protobuf::ProtobufEnum for SigScheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SigScheme> {
        match value {
            1 => ::std::option::Option::Some(SigScheme::HMAC_SHA256),
            2 => ::std::option::Option::Some(SigScheme::ECDSA_P256_SHA256),
            3 => ::std::option::Option::Some(SigScheme::RSA2048_SHA256),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SigScheme] = &[
            SigScheme::HMAC_SHA256,
            SigScheme::ECDSA_P256_SHA256,
            SigScheme::RSA2048_SHA256,
        ];
        values
    }
}

impl ::std::marker::Copy for SigScheme {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for SigScheme {
    fn default() -> Self {
        SigScheme::HMAC_SHA256
    }
}

impl ::protobuf::reflect::ProtobufValue for SigScheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EncScheme {
    NONE = 1,
    AES_256_CBC = 2,
}

impl ::protobuf::ProtobufEnum for EncScheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EncScheme> {
        match value {
            1 => ::std::option::Option::Some(EncScheme::NONE),
            2 => ::std::option::Option::Some(EncScheme::AES_256_CBC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EncScheme] = &[
            EncScheme::NONE,
            EncScheme::AES_256_CBC,
        ];
        values
    }
}

impl ::std::marker::Copy for EncScheme {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EncScheme {
    fn default() -> Self {
        EncScheme::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for EncScheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PublicKeyType {
    EC_P256 = 1,
    RSA2048 = 2,
    DH2048_MODP = 3,
}

impl ::protobuf::ProtobufEnum for PublicKeyType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PublicKeyType> {
        match value {
            1 => ::std::option::Option::Some(PublicKeyType::EC_P256),
            2 => ::std::option::Option::Some(PublicKeyType::RSA2048),
            3 => ::std::option::Option::Some(PublicKeyType::DH2048_MODP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PublicKeyType] = &[
            PublicKeyType::EC_P256,
            PublicKeyType::RSA2048,
            PublicKeyType::DH2048_MODP,
        ];
        values
    }
}

impl ::std::marker::Copy for PublicKeyType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for PublicKeyType {
    fn default() -> Self {
        PublicKeyType::EC_P256
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKeyType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
